#import ScanVulns from libs/scan_vulns.gs;
#import Exploit from libs/exploit_class.gs;

knownVulns = {
  "1.0.0": [
    {"__isa": Exploit, "name": "dingcoundostanchor", "comment": "Permission: Guest", "address": "0x111F1182", "hasRequirement": 0}
  ],
  "1.1.0": [
    {"__isa": Exploit, "name": "l001f", "comment": "Permission: Guest", "address": "0x269BF504", "hasRequirement": 0}
  ],
  "1.3.9": [
    {"__isa": Exploit, "name": "verlaydelengthcod", "comment": "Permission: root", "address": "0x546D33F", "hasRequirement": 1, "requirements": ["Checking registered users equal to 1"]}
  ]
}

metax = include_lib("/lib/metaxploit.so")
if not metax then 
  metax = include_lib(current_path + "/metaxploit.so")
end if

if not metax then 
  exit("Error: Missing metaxploit library")
end if

if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: exploitFTPShell [ip address]</b>")

sshIP = params[0]
sshNetSession = metax.net_use(sshIP, 21)
libFTP = sshNetSession.dump_lib

exploitToUse = null
scanForNewVuln = false

print(libFTP.lib_name+": "+libFTP.version)

print("Checking existing vulns")

if (knownVulns.hasIndex(libFTP.version)) then
  print("Known vulns: ")
  print("0. Scan for a different vuln")
  for exploitIndex in knownVulns[libFTP.version].indexes()
    exploit = knownVulns[libFTP.version][exploitIndex]
    print((exploitIndex+1)+". Address: "+exploit.address+" Name: "+exploit.name+" Comment: "+exploit.comment)
    if (exploit.hasRequirement == true) then
      print("  Requirements: ")
      for r in exploit.requirements.indexes()
        print("    * "+exploit.requirements[r]+".")
      end for
    end if
  end for

  vulnIndex = user_input("Select Vuln to use: ").to_int()
  if (vulnIndex == 0) then
    scanForNewVuln = true
  else 
    exploitToUse = knownVulns[libFTP.version][vulnIndex-1]
  end if
else
  print("No known vulns, scanning...")
end if

if (exploitToUse == null) then
  exploits = ScanVulns(libFTP)
  for exploit in exploits

    if (scanForNewVuln) then
      foundSameVuln = false
      for exploitIndex in knownVulns[libFTP.version].indexes()
        existingExploit = knownVulns[libFTP.version][exploitIndex]
        if (existingExploit.address == exploit.address) then
          if (existingExploit.name == exploit.name) then
            foundSameVuln = true
            break
          end if
        end if
      end for

      if (foundSameVuln) then
        print("Skipping known exploit Address: "+exploit.address+" Name: "+exploit.name)
        continue
      end if
    end if

    if (exploit.hasRequirement == true) then
      print("Exploit has the following requirements: ")
      for r in exploit.requirements.indexes()
        print("  * "+exploit.requirements[r]+".")
      end for
      
      tryExploit = user_input("Try exploit? [N/y]: ")
      if (tryExploit != "y") then
        continue
      end if
    end if

    overflow = libFTP.overflow(exploit.address, exploit.name)
    if (typeof(overflow) != "shell") then
      print("Skipping non-shell exploit...")
      continue
    end if

    print("Found new exploit: "+exploit)
    exploitToUse = exploit
    break

  end for
end if

if (exploitToUse == null) then
  exit("No shell exploits found")
end if

overflow = libFTP.overflow(exploitToUse.address, exploitToUse.name)
if (overflow == null) then
  exit("Exploit doesn't exist? Why did we have an invalid exploit")
end if

if (typeof(overflow) != "shell") then
  exit("Exploit is not a shell? Why did we have an non-shell exploit")
end if

print("Starting terminal shell")
overflow.start_terminal()
exit()
